import { PolicyId, UTxO, Unit } from "lucid-cardano";
import React, { useContext } from "react";

import DatePicker  from "../components/DatePicker";
import {
    applyParamsToScript,
    date,
    Data,
    MintingPolicy,
    fromText,
    Datum,
    PaymentKeyHash,
    SpendingValidator,
    UTxO,
    TxHash,
    Constr,
    Address,
    AddressDetails,
    getAddressDetails,
} from "lucid-cardano";
import { AppStateContext } from "@/pages/_app";
import { signAndSubmitTx } from "@/utilities/utilities";


const VestingDatum = Data.Object({
    beneficiary: Data.Bytes(),
    bStake: Data.Bytes(),
    owner: Data.Bytes(),
    oStake: Data.Bytes(),
});
type CollateralDatum = Data.Static<typeof VestingDatum>;

export default function MintNFT() {
    const { appState, setAppState } = useContext(AppStateContext);
    const { lucid, wAddr, nftPolicyIdHex,deadline,deadlinedate, valAddress} = appState;

    const getUtxo = async (address: string): Promise<UTxO> => {
        const utxos = await lucid!.utxosAt(address);
        const utxo = utxos[0];
        return utxo;
    };

   


    const getFinalPolicy = async (deadline): Promise<SpendingValidator > => {
        const tn = fromText("Oracle's NFT");
        const Params =  [Data.Integer()]
        type Params = Data.Static<typeof Params>;


       
        const validator: SpendingValidator = {
            type: "PlutusV2",
            script: applyParamsToScript<Params>(
                "590f7e590f7b0100003233223233223232323232332232332232323232323232323232323232323232323233223232323232323233322232323232323232323232322232323232223232533532323232323232325335533553353301350023500722220041040133573892011f62656e65666963696172792773207369676e6174757265206d697373696e670003f1533550011040133573892114646561646c696e65206e6f7420726561636865640003f103f1040153355335533550011040133573892114646561646c696e65206e6f7420726561636865640003f15335323233355302d1200135024502323500122333553030120013502750262350012233350012330214800000488cc0880080048cc08400520000013302700200133302502f33355302812001502450483355302b1200101630043355302b1200123500122001304635500322222222222200c335047335504901a335047335504901a483fe6bb80941214120ccd54c09c48005408d411ccd54c0a848004054c018d5400888888888888802841004cd5ce24918756e61757468657269736564207472616e73616374696f6e0003f103f104015335330135002350072222002104013357389201096e6f74206f776e65720003f1323232350022235002223500522350022253335333502600b00600215335001153350051333502400b00300710491333502400b00300710491333502400b0030073550032222222222220053350163350173503d35008200104033501b503c0401233333333001018225335333573466e1c008004108104408854cd4ccd5cd19b890020010420411020102122333573466e2000800410810488ccd5cd19b8900200104204122333573466e2400800410410888ccd5cd19b88002001041042225335333573466e2400800410810440044008894cd4ccd5cd19b890020010420411002100113500222002320013550482253350011504622153353353535002222200422002204123302f0013553353500622350022222222222223333500d2505a2505a2505a233355303c1200150252350012253355335333573466e3cd400888008d40108800815014c4ccd5cd19b8735002220013500422001054053105313505e0031505d00d21350012235001222235004223350022304e4988cd541500040144c111262200213350470023004001130040013333573466e1cd55cea80324000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd40e80ecd5d0a80619a81d01d9aba1500b33503a03c35742a014666aa07ceb940f4d5d0a804999aa81f3ae503d35742a01066a0740866ae85401cccd540f8111d69aba150063232323333573466e1cd55cea80124000466a04a6464646666ae68cdc39aab9d5002480008cd40a8cd4139d69aba150023051357426ae8940088c98c815ccd5ce02a02b82a89aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa0049000119a81719a8273ad35742a00460a26ae84d5d1280111931902b99ab9c054057055135573ca00226ea8004d5d09aba250022326320533357380a00a60a226aae7940044dd50009aba1500533503a75c6ae854010ccd540f81008004d5d0a801999aa81f3ae200135742a00460846ae84d5d1280111931902799ab9c04c04f04d135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00c60646ae84d5d1280311931902099ab9c03e04103f3333573466e1cd55ce9baa0074800081008c98c8100cd5ce01e82001f190009aa82291299a8008a821910a99a999ab9a3371ea66a6a6a00444440084466a00446a0960024a094420022c6a00a444400807c07a266a0880046008002260080026666ae68cdc39aab9d5009480008cccc888848cccc00401401000c008dd71aba15009375c6ae854020dd71aba15007375c6ae84d5d1280391931901f19ab9c03b03e03c32123001002375a0142078264c6407866ae71241035054350003c135573ca00226ea80044d5d1280089aba25001135573ca00226ea800488d40088888888888894cd4ccd54c09848005403c94cd4ccd5cd19b8f00e00103c03b135046001150450042103c103a1335018225335002210031001503523500122220031221233001003002122123300100300222333573466e1c0080040a80a522100122235002223500322533353335009007004002153350031001102d102c102d122123300100300212223232323253335006215333500621533350082130044984c00d261533350072130044984c00d26100d100b1533350072130044984c00d261533350062130044984c00d26100c1533350052100a100b100915333500521533350072130054984c011261533350062130054984c01126100c100a1533350062130054984c011261533350052130054984c01126100b2533350052153335007215333500721333500b00a002001161616100b153335006215333500621333500a009002001161616100a10092533350042153335006215333500621333500a009002001161616100a15333500521533350052133350090080020011616161009100825333500321533350052153335005213335009008002001161616100915333500421533350042133350080070020011616161008100725333500221533350042153335004213335008007002001161616100815333500321533350032133350070060020011616161007100612350012222222200712220031222002122200111233001225335002100110210201233500b2233350032200200200135001220011300100b222335530091200123500122335502a0023355300c1200123500122335502d002333500123300a4800000488cc02c0080048cc028005200000133004002001223355300712001235001223355028002333500123355300b1200123500122335502c00235500d0010012233355500800f00200123355300b1200123500122335502c00235500c00100133355500300a002001111222333553004120015023335530071200123500122335502800235500900133355300412001223500222533533355300c120013233500e223335003220020020013500122001123300122533500210241001021235001223300a00200500610031335027004003502400133553007120012350012232335502900330010053200135502b225335001135500a003221350022253353300c002008112223300200a0041300600300232001355024221122253350011002221330050023335530071200100500400111212223003004112122230010043200135502122112253350011502122133502230040023355300612001004001320013550202211222533500113500322001221333500522002300400233355300712001005004001122123300100300222333573466e3c00800405405088cdc00010008919118011bac0013200135501d2233335573e0024a038466a03660086ae84008c00cd5d100100c119191999ab9a3370e6aae7540092000233221233001003002300a35742a004600a6ae84d5d1280111931900c19ab9c015018016135573ca00226ea80048c8c8c8c8cccd5cd19b8735573aa00890001199991110919998008028020018011919191999ab9a3370e6aae7540092000233221233001003002301335742a00466a01a0246ae84d5d1280111931900e99ab9c01a01d01b135573ca00226ea8004d5d0a802199aa8043ae500735742a0066464646666ae68cdc3a800a4008464244460040086ae84d55cf280191999ab9a3370ea0049001119091118008021bae357426aae7940108cccd5cd19b875003480008488800c8c98c807ccd5ce00e00f80e80e00d89aab9d5001137540026ae854008cd4025d71aba135744a004464c6403266ae7005806405c4d5d1280089aba25001135573ca00226ea80044cd54005d73ad112232230023756002640026aa03444646666aae7c008940688cd4064cd5406cc018d55cea80118029aab9e500230043574400602c26ae84004488c8c8cccd5cd19b875001480008d406cc014d5d09aab9e500323333573466e1d400920022501b23263201633573802602c02802626aae7540044dd5000919191999ab9a3370ea002900311909111180200298039aba135573ca00646666ae68cdc3a8012400846424444600400a60126ae84d55cf280211999ab9a3370ea006900111909111180080298039aba135573ca00a46666ae68cdc3a8022400046424444600600a6eb8d5d09aab9e500623263201633573802602c02802602402226aae7540044dd5000919191999ab9a3370e6aae7540092000233221233001003002300535742a0046eb4d5d09aba2500223263201233573801e02402026aae7940044dd50009191999ab9a3370e6aae75400520002375c6ae84d55cf280111931900819ab9c00d01000e13754002464646464646666ae68cdc3a800a401842444444400646666ae68cdc3a8012401442444444400846666ae68cdc3a801a40104664424444444660020120106eb8d5d0a8029bad357426ae8940148cccd5cd19b875004480188cc8848888888cc008024020dd71aba15007375c6ae84d5d1280391999ab9a3370ea00a900211991091111111980300480418061aba15009375c6ae84d5d1280491999ab9a3370ea00c900111909111111180380418069aba135573ca01646666ae68cdc3a803a400046424444444600a010601c6ae84d55cf280611931900c99ab9c016019017016015014013012011135573aa00826aae79400c4d55cf280109aab9e5001137540024646464646666ae68cdc3a800a4004466644424466600200a0080066eb4d5d0a8021bad35742a0066eb4d5d09aba2500323333573466e1d4009200023212230020033008357426aae7940188c98c8048cd5ce00780900800789aab9d5003135744a00226aae7940044dd5000919191999ab9a3370ea002900111909118008019bae357426aae79400c8cccd5cd19b875002480008c8488c00800cdd71aba135573ca008464c6401e66ae7003003c0340304d55cea80089baa00112232323333573466e1d400520042500623333573466e1d400920022350083006357426aae7940108cccd5cd19b87500348000848880088c98c8040cd5ce00680800700680609aab9d5001137540022424446006008224440024646666ae68cdc3a800a4004400a46666ae68cdc3a80124000400a464c6401466ae7001c02802001c4d55ce9baa00112200212200149010350543100232632003335738921024c670000349848004c8004d54018894cd400454010884cd4014008c0100044488008488488cc00401000c448848cc00400c00848488c00800c4488004448c8c00400488cc00cc008008005",
                [BigInt(deadline)],
                Params
            ),
        };
        const policyId: PolicyId = lucid!.utils.mintingPolicyToId(validator);
        const unit: Unit = policyId + tn;
        setAppState({
            ...appState,
            nftPolicyIdHex: policyId,
            nftTokenNameHex: tn,
            nftAssetClassHex: unit,
            validator: validator,
        });
        console.log(validator)

        return { validator, unit };
    };








    const bot = async () => {
        console.log("minting NFT for " + wAddr);
        if (wAddr) {
            const utxo = await getUtxo(wAddr);
            const { validator, unit } = await getFinalPolicy(deadline);

            const rewardvalidatorAddress = lucid!.utils.validatorToRewardAddress(validator)
            
            const credrewardvalidatorAddress = lucid!.utils.stakeCredentialOf(rewardvalidatorAddress)
            
            const validatorAddress = lucid!.utils.validatorToAddress(validator)

            

            const mainWalletStakeCredential = lucid!.utils.keyHashToCredential('97c6210b84959b09300ee0d9cce00617dacee49f8b015ece1a5ddb14')

            const stakingValidatorScript = {
                type: "PlutusV2",
                script: "58bf58bd01000033232222320063333573466e1cd55ce9baa0024800080188c98c8018cd5ce249035054310000600449848004ccd44888ccd44888ccd44888cd4488cc008c0212211c4b9d95eb2fe5a2204677b82c0dbc4535822cd5c08d440e2e238951a1003500b300530084891c97c6210b84959b09300ee0d9cce00617dacee49f8b015ece1a5ddb14002212330010030022001212230020032221223330010050040032001212230020032122300100320011212230020031122001120011",
              };
    
    
            const stakingValidatorAddress = lucid.utils.validatorToRewardAddress(
                stakingValidatorScript,
              );
    
            const stakingValidatorStakeCredential= lucid.utils.stakeCredentialOf(stakingValidatorAddress)


            const stakevalidatorAddress = lucid!.utils.validatorToAddress(validator,stakingValidatorStakeCredential)


           
          
           

            const scriptutxo = await utxoLookUp(stakevalidatorAddress)

            const utxoinfo = [];

            for (const utxo of scriptutxo) {
                const datum = utxo.datum;
                if (datum) {
                    try {
                        
                        console.log("hello")
                        const d = Data.from(datum, VestingDatum);

                        const paymentCred = lucid!.utils.keyHashToCredential(d.beneficiary)
                        const stakeCred = lucid!.utils.keyHashToCredential(d.bStake)
                        const utxoAdress = lucid!.utils.credentialToAddress(paymentCred,stakeCred)

                        const amt = ((utxo.assets.lovelace))

                        const assts = utxo.assets

                        const tokenWidgit = Object.keys(assts).length

                                               
                        
                        const tkns = assts

                        

                        

                      
                        
                        

                        

        
                        utxoinfo.push([utxoAdress,utxo,amt,tkns,tokenWidgit ])


                
    

                        
                        ;
                    } catch (err) {
                    }
                }
            }

            console.log(deadline)
            console.log(stakevalidatorAddress)

            setAppState({
                ...appState,
                utxo2: utxoinfo,
                valAddress: stakevalidatorAddress,
                 
    
            });



            
        }
    };


    const utxoLookUp =async (address) => {

        const utxos = await lucid.utxosAt(address);

        return utxos;

       }

    return (
        <button
            onClick={bot}
            style={{backgroundColor: "silver"}}
            className=" bg-zinc-800 text-black font-quicksand text-lg font-bold py-1 px-8 rounded-lg active:translate-y-[2px] active:shadow-[0_4px_0px_0px_rgba(0,0,0,0.6)] disabled:active:translate-y-0 disabled:active:shadow-[0_5px_0px_0px_rgba(0,0,0,0.2)] disabled:bg-zinc-200 disabled:shadow-[0_5px_0px_0px_rgba(0,0,0,0.2)] disabled:text-zinc-600"
            
        
        >
            {" "}
            Create Validator
        </button>
    );
}
